//============================================================================
//  Copyright (c) Kitware, Inc.
//  All rights reserved.
//  See LICENSE.txt for details.
//  This software is distributed WITHOUT ANY WARRANTY; without even
//  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
//  PURPOSE.  See the above copyright notice for more information.
//
//  Copyright 2014 Sandia Corporation.
//  Copyright 2014 UT-Battelle, LLC.
//  Copyright 2014. Los Alamos National Security
//
//  Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
//  the U.S. Government retains certain rights in this software.
//
//  Under the terms of Contract DE-AC52-06NA25396 with Los Alamos National
//  Laboratory (LANL), the U.S. Government retains certain rights in
//  this software.
//============================================================================
// **** DO NOT EDIT THIS FILE!!! ****
// This file is automatically generated by FunctionInterfaceDetailPost.h.in

#ifndef vtk_m_internal_FunctionInterfaceDetailPost_h
#define vtk_m_internal_FunctionInterfaceDetailPost_h

#if !defined(vtk_m_internal_FunctionInterface_h) && !defined(VTKM_TEST_HEADER_BUILD)
#error FunctionInterfaceDetailPre.h must be included from FunctionInterface.h
#endif

#include <vtkm/internal/FunctionInterface.h>

#if VTKM_MAX_FUNCTION_PARAMETERS != 10
#error Mismatch of maximum parameters between FunctionInterfaceDatailPre.h.in and FunctionInterfaceDetailPost.h.in
#endif


namespace vtkm {
namespace internal {

namespace detail {

//============================================================================

template<typename Transform,
         typename R>
struct FunctionInterfaceStaticTransformType<R(), Transform> {
  typedef R(type)(
        );
};

template<typename Transform,
         typename R,
         typename P1>
struct FunctionInterfaceStaticTransformType<R(P1), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2>
struct FunctionInterfaceStaticTransformType<R(P1,P2), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5,P6), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type,
        typename Transform::template ReturnType<P6>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5,P6,P7), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type,
        typename Transform::template ReturnType<P6>::type,
        typename Transform::template ReturnType<P7>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5,P6,P7,P8), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type,
        typename Transform::template ReturnType<P6>::type,
        typename Transform::template ReturnType<P7>::type,
        typename Transform::template ReturnType<P8>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8,
         typename P9>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5,P6,P7,P8,P9), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type,
        typename Transform::template ReturnType<P6>::type,
        typename Transform::template ReturnType<P7>::type,
        typename Transform::template ReturnType<P8>::type,
        typename Transform::template ReturnType<P9>::type
        );
};

template<typename Transform,
         typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8,
         typename P9,
         typename P10>
struct FunctionInterfaceStaticTransformType<R(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10), Transform> {
  typedef R(type)(
        typename Transform::template ReturnType<P1>::type,
        typename Transform::template ReturnType<P2>::type,
        typename Transform::template ReturnType<P3>::type,
        typename Transform::template ReturnType<P4>::type,
        typename Transform::template ReturnType<P5>::type,
        typename Transform::template ReturnType<P6>::type,
        typename Transform::template ReturnType<P7>::type,
        typename Transform::template ReturnType<P8>::type,
        typename Transform::template ReturnType<P9>::type,
        typename Transform::template ReturnType<P10>::type
        );
};


} // namespace detail

//============================================================================

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R()>
make_FunctionInterface(
      )
{
  FunctionInterface<R()> fi;
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1)>
make_FunctionInterface(
      P1 p1
      )
{
  FunctionInterface<R(P1)> fi;
  fi.template SetParameter<1>(p1);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2)>
make_FunctionInterface(
      P1 p1,
      P2 p2
      )
{
  FunctionInterface<R(P1,P2)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3
      )
{
  FunctionInterface<R(P1,P2,P3)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4
      )
{
  FunctionInterface<R(P1,P2,P3,P4)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5,P6)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5,
      P6 p6
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5,P6)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  fi.template SetParameter<6>(p6);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5,
      P6 p6,
      P7 p7
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  fi.template SetParameter<6>(p6);
  fi.template SetParameter<7>(p7);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5,
      P6 p6,
      P7 p7,
      P8 p8
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  fi.template SetParameter<6>(p6);
  fi.template SetParameter<7>(p7);
  fi.template SetParameter<8>(p8);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8,
         typename P9>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8,P9)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5,
      P6 p6,
      P7 p7,
      P8 p8,
      P9 p9
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8,P9)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  fi.template SetParameter<6>(p6);
  fi.template SetParameter<7>(p7);
  fi.template SetParameter<8>(p8);
  fi.template SetParameter<9>(p9);
  return fi;
}

/// \brief Create a \c FunctionInterface
///
/// \c make_FunctionInterface is a function that takes a variable number of
/// arguments and returns a \c FunctionInterface object containing these
/// objects. Since the return type for the function signature is not specified,
/// you must always specify it as a template parameter
///
/// \code{.cpp}
/// vtkm::internal::FunctionInterface<void(int,double,char)> functionInterface =
///     vtkm::internal::make_FunctionInterface<void>(1, 2.5, 'a');
/// \endcode
///
template<typename R,
         typename P1,
         typename P2,
         typename P3,
         typename P4,
         typename P5,
         typename P6,
         typename P7,
         typename P8,
         typename P9,
         typename P10>
VTKM_EXEC_CONT_EXPORT
FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)>
make_FunctionInterface(
      P1 p1,
      P2 p2,
      P3 p3,
      P4 p4,
      P5 p5,
      P6 p6,
      P7 p7,
      P8 p8,
      P9 p9,
      P10 p10
      )
{
  FunctionInterface<R(P1,P2,P3,P4,P5,P6,P7,P8,P9,P10)> fi;
  fi.template SetParameter<1>(p1);
  fi.template SetParameter<2>(p2);
  fi.template SetParameter<3>(p3);
  fi.template SetParameter<4>(p4);
  fi.template SetParameter<5>(p5);
  fi.template SetParameter<6>(p6);
  fi.template SetParameter<7>(p7);
  fi.template SetParameter<8>(p8);
  fi.template SetParameter<9>(p9);
  fi.template SetParameter<10>(p10);
  return fi;
}


template<typename TR,
         typename UR>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR()>,
    vtkm::internal::FunctionInterface<UR()> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        )> type;
};

template<typename TR,
         typename TP1,
         typename UR,
         typename UP1>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1)>,
    vtkm::internal::FunctionInterface<UR(UP1)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename UR,
         typename UP1,
         typename UP2>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>,
        vtkm::Pair<TP6, UP6>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>,
        vtkm::Pair<TP6, UP6>,
        vtkm::Pair<TP7, UP7>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>,
        vtkm::Pair<TP6, UP6>,
        vtkm::Pair<TP7, UP7>,
        vtkm::Pair<TP8, UP8>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename TP9,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8,
         typename UP9>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>,
        vtkm::Pair<TP6, UP6>,
        vtkm::Pair<TP7, UP7>,
        vtkm::Pair<TP8, UP8>,
        vtkm::Pair<TP9, UP9>
        )> type;
};

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename TP9,
         typename TP10,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8,
         typename UP9,
         typename UP10>
struct FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9,TP10)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9,UP10)> >
{
  typedef vtkm::internal::FunctionInterface<
      typename detail::FunctionInterfaceZipReturn<TR,UR>::type (
        vtkm::Pair<TP1, UP1>,
        vtkm::Pair<TP2, UP2>,
        vtkm::Pair<TP3, UP3>,
        vtkm::Pair<TP4, UP4>,
        vtkm::Pair<TP5, UP5>,
        vtkm::Pair<TP6, UP6>,
        vtkm::Pair<TP7, UP7>,
        vtkm::Pair<TP8, UP8>,
        vtkm::Pair<TP9, UP9>,
        vtkm::Pair<TP10, UP10>
        )> type;
};


/// Creates a "zipped" version of two \c FunctionInterface objects. Each
/// parameter in the returned object is a \c vtkm::Pair that is a combination
/// of the corresponding pair of the input objects.
///
template<typename TR,
         typename TP1,
         typename UR,
         typename UP1>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1)>,
    vtkm::internal::FunctionInterface<UR(UP1)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1)>,
      vtkm::internal::FunctionInterface<UR(UP1)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename UR,
         typename UP1,
         typename UP2>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));
  result.template SetParameter<6>(
      vtkm::make_Pair(first.template GetParameter<6>(),
                      second.template GetParameter<6>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));
  result.template SetParameter<6>(
      vtkm::make_Pair(first.template GetParameter<6>(),
                      second.template GetParameter<6>()));
  result.template SetParameter<7>(
      vtkm::make_Pair(first.template GetParameter<7>(),
                      second.template GetParameter<7>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));
  result.template SetParameter<6>(
      vtkm::make_Pair(first.template GetParameter<6>(),
                      second.template GetParameter<6>()));
  result.template SetParameter<7>(
      vtkm::make_Pair(first.template GetParameter<7>(),
                      second.template GetParameter<7>()));
  result.template SetParameter<8>(
      vtkm::make_Pair(first.template GetParameter<8>(),
                      second.template GetParameter<8>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename TP9,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8,
         typename UP9>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));
  result.template SetParameter<6>(
      vtkm::make_Pair(first.template GetParameter<6>(),
                      second.template GetParameter<6>()));
  result.template SetParameter<7>(
      vtkm::make_Pair(first.template GetParameter<7>(),
                      second.template GetParameter<7>()));
  result.template SetParameter<8>(
      vtkm::make_Pair(first.template GetParameter<8>(),
                      second.template GetParameter<8>()));
  result.template SetParameter<9>(
      vtkm::make_Pair(first.template GetParameter<9>(),
                      second.template GetParameter<9>()));

  return result;
}

template<typename TR,
         typename TP1,
         typename TP2,
         typename TP3,
         typename TP4,
         typename TP5,
         typename TP6,
         typename TP7,
         typename TP8,
         typename TP9,
         typename TP10,
         typename UR,
         typename UP1,
         typename UP2,
         typename UP3,
         typename UP4,
         typename UP5,
         typename UP6,
         typename UP7,
         typename UP8,
         typename UP9,
         typename UP10>
VTKM_EXEC_CONT_EXPORT
typename vtkm::internal::FunctionInterfaceZipType<
    vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9,TP10)>,
    vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9,UP10)> >::type
make_FunctionInterfaceZip(
      const vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9,TP10)> &first,
      const vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9,UP10)> &second)
{
  typename vtkm::internal::FunctionInterfaceZipType<
      vtkm::internal::FunctionInterface<TR(TP1,TP2,TP3,TP4,TP5,TP6,TP7,TP8,TP9,TP10)>,
      vtkm::internal::FunctionInterface<UR(UP1,UP2,UP3,UP4,UP5,UP6,UP7,UP8,UP9,UP10)> >::type result;

  result.template SetParameter<1>(
      vtkm::make_Pair(first.template GetParameter<1>(),
                      second.template GetParameter<1>()));
  result.template SetParameter<2>(
      vtkm::make_Pair(first.template GetParameter<2>(),
                      second.template GetParameter<2>()));
  result.template SetParameter<3>(
      vtkm::make_Pair(first.template GetParameter<3>(),
                      second.template GetParameter<3>()));
  result.template SetParameter<4>(
      vtkm::make_Pair(first.template GetParameter<4>(),
                      second.template GetParameter<4>()));
  result.template SetParameter<5>(
      vtkm::make_Pair(first.template GetParameter<5>(),
                      second.template GetParameter<5>()));
  result.template SetParameter<6>(
      vtkm::make_Pair(first.template GetParameter<6>(),
                      second.template GetParameter<6>()));
  result.template SetParameter<7>(
      vtkm::make_Pair(first.template GetParameter<7>(),
                      second.template GetParameter<7>()));
  result.template SetParameter<8>(
      vtkm::make_Pair(first.template GetParameter<8>(),
                      second.template GetParameter<8>()));
  result.template SetParameter<9>(
      vtkm::make_Pair(first.template GetParameter<9>(),
                      second.template GetParameter<9>()));
  result.template SetParameter<10>(
      vtkm::make_Pair(first.template GetParameter<10>(),
                      second.template GetParameter<10>()));

  return result;
}


}
} // namespace vtkm::internal

#endif //vtk_m_internal_FunctionInterfaceDetailPost_h
